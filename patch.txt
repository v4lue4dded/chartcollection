diff --git a/examples/scatterplot_example.js b/examples/scatterplot_example.js
index 6d379c3..6773215 100644
--- a/examples/scatterplot_example.js
+++ b/examples/scatterplot_example.js
@@ -144,6 +144,10 @@ var my_chart = new c3.Plot({
         // Add a **render** callback to add _guidelines_ to track cursor movement using D3.
         // `render` is used for custom initialization and is only called once when the plot is first rendered.
         render: function () {
+            console.log(this.anchor); // Check the complete instance state
+            this.content = new c3.Selection(d3.select(this.anchor), '.content');
+            console.log(this.content); // Check the complete instance state
+            console.log(this.content.all); // Should show a D3 selection, not undefined            
             this.content.all.append('line').attr('class', 'guideline x');
             this.content.all.append('line').attr('class', 'guideline y');
             this.content.all.selectAll('line.guideline')
@@ -204,6 +208,8 @@ var my_chart = new c3.Plot({
 });
 // ## Render
 // Render your chart
+
+console.log(my_chart); // 'someC3SelectionInstance' should be an instance of c3.Selection
 my_chart.render();
 // ## Resize
 // Resize the chart when the window is resized
diff --git a/js/c3.js b/js/c3.js
index 4bc1889..962a2c2 100644
--- a/js/c3.js
+++ b/js/c3.js
@@ -883,7 +883,11 @@ Clsc3.initClass();
 
 // A mixin to add support for registering and triggering events
 c3.Dispatch = class Dispatch {
-    constructor() { this.dispatcher = {}; }
+    constructor() { 
+        this.dispatcher = {};
+        this.on = this.on.bind(this);
+        this.trigger = this.trigger.bind(this);
+    }
 
     // Register an event handler to catch events fired by the visualization.
     // Multiple handlers can be set by specifying a namespace for the event name like `event.namespace`
